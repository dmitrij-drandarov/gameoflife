
Ziel: Game of Life über Webstart anbieten

Voraussetzungen:
    * Anwendung soll in Sandbox laufen
    * Nutzen der JNLP API, damit der Benutzer der Anwendung bei Bedarf nach Rechten gefragt wird

Probleme:
    * Damit Java Web Start eine Anwendung ausführt, muss sie signiert sein
        * Zusätzlich muss das Zertifikat im "Java Control Panel" unter "Security" eingestellt werden
        * damit die Anwendung lokal ausgeführt werden kann, muss der Pfad zur Datei in die "Exception Site List" aufgenommen werden
            * Codebase muss beim lokalen ausführen leer sein
        * mit selbst signierten Zertifikaten kann man eine Anwendung nur in der "Sandbox" ausführen. "all-permissions" ist mit
          selbst signierten Zertifikaten gar nicht erlaubt
    * In der auszuführenden JAR muss das 'Security' Attribut angeben werden. Es muss mit der Angabe in der JNLP Datei übereinstimmen
        [sandbox|all-permissions]
        Wird nichts angegeben, wird 'sandbox' genutzt
        > http://docs.oracle.com/javase/7/docs/technotes/guides/jweb/security/manifest.html
    * In der Java Sandbox ist Reflection nicht erlaubt und es darf nicht auf jede Property zugegriffen werden
        * Dependency Management
            * Spring:
                ListableBeanFactory nutzt Reflection
                > http://forum.spring.io/forum/spring-projects/container/124462-unsigned-java-web-start-spring-application
                * Versuch den ClassPathXmlApplicationContext zu nutzen, damit keine Relfection genutzt wird. Dann tritt allerdings folgender Fehler auf
                        org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: Unable to locate Spring NamespaceHandler for XML schema namespace [http://www.springframework.org/schema/context]
                        Offending resource: class path resource [applicationCtx.xml]
                            at org.springframework.beans.factory.parsing.FailFastProblemReporter.error(FailFastProblemReporter.java:70)
                            at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:85)
                            at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:80)
                            at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.error(BeanDefinitionParserDelegate.java:301)
                    * Problem mit mehreren JARs, in denen verschiedene 'file.handler' Dateien mit verschiedenen Angaben waren
            * Guice:
                greift mit System.getProperty(...) auf nicht erlaubte Properties zu.
            -> eigene Lösung für Dependency Management
                > gol.base.injection.BeanRepository
        * JAXB
            * nutzt auch Reflection und kann in der Sandbox daher nicht verwendet werden
            -> keine eigene Lösung implementiert.
    * Beim Starten einer JNLP die auf der lokalen Platte liegt, hat Java Web Start Probleme damit Resourcen zu laden.
        getClass().getResource(...) funktioniert nur, wenn die JNLP von einem Webserver gestartet wurde. Codebase muss stimmen.
            java.lang.IllegalStateException: Location is not set.
                at javafx.fxml.FXMLLoader.loadImpl(Unknown Source)
                at javafx.fxml.FXMLLoader.load(Unknown Source)
                ...
            > https://www.reddit.com/r/JavaFX/comments/3dyv3f/can_anyone_webstart_a_javafx_app_that_is_using/
        * stellt man die Anwendung über einen HttpServer bereit und startet sie über den Browser, funktioniert die Anwendung
            > gol.HttpServerLauncher
    * Die JNLP API muss als Abhängigkeit zum Projekt hinzugefügt werden
    * Das starten einer Java Web Start Anwendung aus der Entwicklungsumgebung ist nicht einfach möglich. Wird die Anwendung
        mit 'java.exe' und nicht mit 'javaws.exe' gestartet, stehen die JNLP Services nicht zur Verfügung. Beim Versuchten
        Zugriff, fliegt eine Exception. Remotedebugging kann eine Lösung sein. Für die Entwicklung alles äußerst umständlich.


Keystore generieren:
> keytool.exe -genkey -alias <alias> -keyalg RSA -validity 365 -keystore devstore.jks

Zertifikat exportieren, damit es im Java Control Panel angegeben werden kann:
> keytool.exe -export -file export_pub.cert -keystore devstore.jks -storepass changeit -alias <alias>


Lösung um Anwendungen zu programmieren die nicht signiert sind und in einer Sandbox laufen
    * Die generierte Anwendung unter 'gameoflife-javafx\target\jnlp' wird durch einen Webserver (Spark)
        angeboten
    * Das ClientSystem muss eine JNLP als soche erkennen, deswegen wird der korrekte ContentType benötigt
    * Um eine JavaWebStart Anwendung zu debuggen, kann RemoteDebugging genutzt werden (StartGoL.bat)
        * In der IDE eine Remote Run Config anlegen (Port merken)
        * Client Skript (Windows) zum Starten (gemerkten Port angeben):
            set JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005
            javaws http://localhost:8123/files/GameOfLife.jnlp
        * Build mit 'mvn clean package' laufen lassen
        * 'StartTestServer.java' starten
        * Skript starten
            * durch 'suspend=y' wartet JavaWebstart, bis die Remote Run Config gestartet wird
        * Es kann sein, das im Java Control Panel der Cache ab und an gelöscht werden muss, damit beim
            Debuggen mit dem richtigen Code gearbeitet wird. Evtl. unter 'General -> Settings' den Haken
            'Keep temporary files on my computer' rausnehmen